import { addCompilationDiagnostic, compileCdsToJson, determineCdsCommand } from './src/cdsCompiler';
import { runJavaScriptExtractor } from './src/codeql';
import { configureLgtmIndexFilters, setupAndValidateEnvironment } from './src/environment';
import { getCdsFilePathsToProcess } from './src/filesystem';
import { findPackageJsonDirs, installDependencies } from './src/packageManager';
import { validateArguments } from './src/utils';

// Validate arguments to this script.
if (!validateArguments(process.argv, 4)) {
  // Exit with an error code on invalid use of this script.
  process.exit(1);
}

// Get command-line (CLI) arguments and store them in named variables for clarity.
const responseFile: string = process.argv[2];
const sourceRoot: string = process.argv[3];

// Force this script, and any process it spawns, to use the project (source) root
// directory as the current working directory.
process.chdir(sourceRoot);

console.log(`Indexing CDS files in project source directory: ${sourceRoot}`);

// Setup the environment and validate all requirements.
const {
  success: envSetupSuccess,
  errorMessages,
  codeqlExePath,
  autobuildScriptPath,
  platformInfo,
} = setupAndValidateEnvironment(sourceRoot);

if (!envSetupSuccess) {
  const codeqlExe = platformInfo.isWindows ? 'codeql.exe' : 'codeql';
  console.warn(
    `'${codeqlExe} database index-files --language cds' terminated early due to: ${errorMessages.join(
      ', ',
    )}.`,
  );
  // Exit with an error code when environment setup fails.
  process.exit(1);
}

// Validate response file and get the fully paths of CDS files to process.
const filePathsResult = getCdsFilePathsToProcess(responseFile, platformInfo);
if (!filePathsResult.success) {
  console.warn(filePathsResult.errorMessage);
  // Exit with an error if unable to get a list of `.cds` file paths to process.
  process.exit(1);
}

// Get the validated list of CDS files to process
const cdsFilePathsToProcess = filePathsResult.cdsFilePaths;

// Find all package.json directories that have a `@sap/cds` node dependency.
const packageJsonDirs = findPackageJsonDirs(cdsFilePathsToProcess);

// Install node dependencies in each directory.
console.log('Pre-installing required CDS compiler versions ...');
installDependencies(packageJsonDirs);

// Determine the CDS command to use.
const cdsCommand = determineCdsCommand();

console.log('Processing CDS files to JSON ...');

// Compile each `.cds` file to create a `.cds.json` file.
for (const rawCdsFilePath of cdsFilePathsToProcess) {
  try {
    // Use resolved path directly instead of passing through getArg
    const compilationResult = compileCdsToJson(rawCdsFilePath, sourceRoot, cdsCommand);

    if (!compilationResult.success && compilationResult.message) {
      console.error(
        `ERROR: adding diagnostic for source file=${rawCdsFilePath} : ${compilationResult.message} ...`,
      );
      addCompilationDiagnostic(rawCdsFilePath, compilationResult.message, codeqlExePath);
    }
  } catch (errorMessage) {
    console.error(
      `ERROR: adding diagnostic for source file=${rawCdsFilePath} : ${String(errorMessage)} ...`,
    );
    addCompilationDiagnostic(rawCdsFilePath, String(errorMessage), codeqlExePath);
  }
}

// Configure the "LGTM" index filters for proper extraction.
configureLgtmIndexFilters();

// Run CodeQL's JavaScript extractor to process the compiled JSON files.
const extractorResult = runJavaScriptExtractor(sourceRoot, autobuildScriptPath);
if (!extractorResult.success && extractorResult.error) {
  console.error(`Error running JavaScript extractor: ${extractorResult.error}`);
}

// Use the `index-file.js` name in the log message as that is the name of the script
// that is actually run by the `codeql database index-files` command. This TypeScript
// file is where the code/logic is edited/implemented, but the runnable script is
// generated by the TypeScript compiler and is named `index-files.js`.
console.log(`Completed run of index-files.js script for CDS extractor.`);
