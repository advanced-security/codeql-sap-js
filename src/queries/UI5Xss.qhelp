<!DOCTYPE qhelp PUBLIC
 "-//Semmle//qhelp//EN"
 "qhelp.dtd">
<qhelp>
  <overview>
    <p>
      Receiving text from the user, most notably through a control, and rendering it as HTML in another control can lead to a cross-site scripting vulnerability.
    </p>
  </overview>

  <recommendation>
    <div>
      <!-- Custom Control -->
      If the XSS attack vector includes a user-defined control, then we can mitigate the issue by improving on the implementation of the control. Specifically, we can change the method calls on instances of sap.ui.core.RenderManager (henceforth RenderManager).
      <ul>
	<li>
	  <!-- API1: Don't use `write`, use `writeEscaped` -->
	  When using the now-deprecated older API with RenderManager.write or RenderManager.writeAttribute, use their respective counterparts RenderManager.writeEscaped and RenderManager.writeAttributeEscaped which sanitizes their rendered contents.
	</li>
	<li>
	  <!-- API2: Don't use `unsafeHtml` or `text` -->
	  When using the newer API (dubbed Semantic Rendering) with <code>apiVersion: 2</code>, do not use RenderManager.unsafeHtml unless the control property <code>sanitizeContent</code> is set to <code>true</code>.
	</li>
	<li>
	  <!-- Use domain-specific sanitizers such as `encodeXML` or
	       enforce the property to something other than `string` or `any` -->
	  Regardless of the API version, it is also a good idea to use escaping functions in sap.base.security. Relevant sanitizers include encodeXML and encodeHTML.
	</li>
      </ul>
    </div>
    <div>
      An XSS attack vector can still exist even when no user-defined control is used. In this case, a model property or a control property act as a intermediate step when external data is passed.
      <li>
	<!-- Don't directly funnel user input from one control to another -->
	The view component of a UI5 application can be declared such that one control can funnel its property value to that of another. This can happen either through a property of the model attached to the view, or by some controller mechanism that sets the target control's property to the property value of a source control. 
      </li>
    </div>
  </recommendation>

  <example>
    <p>
      <!-- Sample UI5 application that has XSS with Custom Control -->
    </p>
    <sample src="CustomControlWithXSS.js" />
    <p>
      <!-- The same application with XSS removed -->
    </p>
    <sample src="CustomControlWithXSSRemoved.js" />
    <p>
      <!-- Sample UI5 application that has XSS with Library Control -->
    </p>
    <sample src="LibraryControlWithXSS.js" />
    <p>
      <!-- The same application with XSS removed -->
    </p>
    <sample src="LibraryControlWithXSSRemoved.js" />
  </example>

  <references>
    <!-- ========== Generic OWASP documentations ========== -->
    <li>
      OWASP:
      <a href="https://cheatsheetseries.owasp.org/cheatsheets/DOM_based_XSS_Prevention_Cheat_Sheet.html">DOM based
	XSS Prevention Cheat Sheet</a>.
    </li>
    <li>
      OWASP:
      <a href="https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html">XSS
	(Cross Site Scripting) Prevention Cheat Sheet</a>.
    </li>
    <li>
      OWASP:
      <a href="https://owasp.org/www-community/attacks/DOM_Based_XSS">DOM Based XSS</a>.
    </li>
    <li>
      OWASP:
      <a href="https://owasp.org/www-community/Types_of_Cross-Site_Scripting">Types of Cross-Site
	Scripting</a>.
    </li>
    <!-- ========== UI5 SAP documentations ========== -->
    <li>
      SAP:
      <a href="https://sapui5.hana.ondemand.com/sdk/#/topic/91f0bd316f4d1014b6dd926db0e91070.html">Cross-site Scripting</a> in UI5.
    </li>
    <li>
      SAP:
      <a href="https://sapui5.hana.ondemand.com/sdk/#/topic/4de64e2e191f4a7297d4fd2d1e233a2d.html">Prevention of Cross-site Scripting</a> in UI5.
    </li>
    <li>
      SAP: <a href="https://sapui5.hana.ondemand.com/sdk/#/api/sap.ui.core.RenderManager">API Documentation of sap.ui.core.RenderManager</a>
    </li>
    <li>
      SAP: <a href="https://sapui5.hana.ondemand.com/sdk/#/api/sap.ui.core.HTML%23methods/setSanitizeContent">Documentation of sap.ui.core.HTML</a>
    </li>
  </references>
</qhelp>

